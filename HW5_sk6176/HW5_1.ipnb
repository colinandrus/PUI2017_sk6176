{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pylab as pl\n",
    "import scipy as sp\n",
    "from scipy import stats\n",
    "%pylab inline\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(150)\n",
    "# decision about population\n",
    "mymean = 800.\n",
    "mystdv =14\n",
    "Nsamples = 100\n",
    "nit = 1000\n",
    "myDmeans = np.zeros(nit)\n",
    "for i in range(nit):\n",
    "    pop=sp.stats.norm.rvs(loc=mymean, scale=mystdv, size=Nsamples)\n",
    "    myDmeans[i]=pop.mean()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([  5.,   2.,  11.,  15.,  28.,  12.,  13.,   8.,   4.,   2.]),\n",
       " array([ 771.3120279 ,  777.59788106,  783.88373421,  790.16958736,\n",
       "         796.45544052,  802.74129367,  809.02714683,  815.31299998,\n",
       "         821.59885313,  827.88470629,  834.17055944]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f2f98aebb50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pl.hist(pop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "zs = ((mymean - myDmeans)*np.sqrt(Nsamples))/mystdv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([   2.,    8.,   55.,  133.,  240.,  248.,  193.,   89.,   27.,    5.]),\n",
       " array([-3.50779094, -2.8396802 , -2.17156946, -1.50345872, -0.83534798,\n",
       "        -0.16723724,  0.5008735 ,  1.16898424,  1.83709498,  2.50520572,\n",
       "         3.17331646]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f2f98918490>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pl.hist(zs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KstestResult(statistic=0.016796208926172174, pvalue=0.94047834085776538)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sp.stats.kstest(zs,'norm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
